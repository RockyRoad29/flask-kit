#!/usr/bin/env python
# -*- coding: utf-8 -*-
# file: {}
"""
Form source code generator
"""
from importlib import import_module
from ext import db
from flask import current_app
from flask.ext.wtf import Form
from scripts.gen_imports import ImportsGenerator
from sqlalchemy.ext.declarative import DeclarativeMeta
import wtforms
from wtforms.ext.csrf.fields import CSRFTokenField
from wtforms.ext.sqlalchemy.orm import model_form
import yaml

__author__ = 'rockyroad'


class FormModuleGenerator():
    def __init__(self, package_name):
        self.models = self.find_models(package_name)
        current_app.logger.debug('Package: %s : found %d models', package_name, len(self.models))
        self.imports = ImportsGenerator()
        self.forms   = []
    
    def add_form(self,meta):
        current_app.logger.debug('Examining metaform: %r', meta)
        gen = FormGenerator(meta, parent=self)
        code = gen.to_source()
        self.forms.append(code)

    def add_import(self, the_class):
        self.imports.add_class(the_class)

    def to_source(self):
        #file_header
        code = """
# -*- coding: utf-8 -*-
# Generated by RockyRoad's form_generator

"""
        code += self.imports.python()
        for form_code in self.forms:
            code += form_code
        return code

    @staticmethod
    def find_models(package_name):
        module = import_module(package_name + '.models')
        models = []
        for n,v in vars(module).iteritems():
            #current_app.logger.debug('Examining variable %s: %r', n, v)
            #if issubclass(v, db.Model):
            if isinstance(v, DeclarativeMeta):
                models.append(v)
        return models

    def gen_all(self):
        for model in self.models:
            current_app.logger.debug('Processing model: %r', model)
            meta = model_form(model, db_session=db, base_class=Form)
            self.add_form(meta)
        return self.to_source()

class FormGenerator():
    """
    Inspects a generated form and suggests code
    """
    def __init__(self, meta, parent=None):
        assert(isinstance(meta, wtforms.form.FormMeta))
        self.i_form = meta()
        self.members = []
        self.parent = parent

    def add_import(self, the_class):
        if self.parent:
            self.parent.add_import(the_class)

    def add_member(self, fld, validators, widget, descr):
        self.members.append("    {0} = {1}({2!r}, validators={3}, widget={4}())".format(
            fld.name, fld.type, fld.label.text, validators, widget
        ))
        if descr:
            self.members.append(descr)
        self.members.append("\n")

    def field_properties(self, fld):
        """
        Filters a field object's dictionary to keep only relevant data
        """
        excludes = ('name', 'short_name', 'id', 'type', 'label', 'flags')
        info = {k: v for k, v in fld.__dict__.iteritems() if v and k not in excludes}
        return info

    def describe_field(self, fld):
        info = self.field_properties(fld)
        lines = yaml.dump(info).split("\n")
        assert(lines[-1] == '')
        lines.pop()
        descr = "\n".join(['    # ' + line for line in lines])

        return descr

    def inspect_fields(self):
        for fld in self.i_form:
            if isinstance(fld, CSRFTokenField):
                continue
            self.add_import(fld.__class__)
            validators = '['
            for v in fld.validators:
                name = v.__class__.__name__
                self.add_import(v.__class__)
                validators += name + '(), '
            validators += ']'
            widget = fld.widget.__class__
            self.add_import(widget)
            #descr = json.dumps(fld, default=lambda o: {repr(o): o.__dict__}, indent=4, )
            descr = self.describe_field(fld)
            self.add_member(fld, validators, widget.__name__, descr)

    def get_name(self):
        return self.i_form.__class__.__name__

    def to_source(self):
        self.inspect_fields()
        code = "\n\nclass %s(Form):\n" % (self.get_name())
        code += "\n".join(self.members)
        #code += "\n\n"

        return code


def form_from_model(model):
    from wtforms.ext.sqlalchemy.orm import model_form
    from flask.ext.wtf import Form
    meta = model_form(model, db_session=db, base_class=Form)
    return form_from_meta(meta)


def form_from_meta(meta):
    """

    :param meta: wtforms.form.FormMeta
    """
    inspector = FormGenerator(meta)
    return inspector.to_source()


def forms4package(package_name):
    #import logging
    #current_app.logger.setLevel(logging.DEBUG)
    gen = FormModuleGenerator(package_name)
    return gen.gen_all()

